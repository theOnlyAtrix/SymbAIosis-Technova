{"ast":null,"code":"import _objectSpread from\"C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useState}from\"react\";import{onAuthStateChanged}from\"firebase/auth\";import{auth,db}from\"../firebase\";import{collection,getDocs}from\"firebase/firestore\";import Dashboard from\"../components/Dashboard\";import{useNavigate}from\"react-router-dom\";import{ReactFlowProvider}from\"reactflow\";import{jsx as _jsx}from\"react/jsx-runtime\";export default function DashboardPage(){const[user,setUser]=useState(null);const[companies,setCompanies]=useState([]);const[currentCompany,setCurrentCompany]=useState(null);const[loading,setLoading]=useState(true);const navigate=useNavigate();useEffect(()=>{const unsubscribe=onAuthStateChanged(auth,firebaseUser=>{if(firebaseUser)setUser(firebaseUser);else navigate(\"/\");setLoading(false);});return()=>unsubscribe();},[navigate]);useEffect(()=>{const fetchCompanies=async()=>{if(!user)return;try{const snapshot=await getDocs(collection(db,\"companies\"));const companyList=snapshot.docs.map(doc=>_objectSpread({id:doc.id},doc.data()));setCompanies(companyList);const ownCompany=companyList.find(c=>c.email===user.email);setCurrentCompany(ownCompany||null);}catch(err){console.error(err);}};fetchCompanies();},[user]);if(loading)return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});if(!user)return/*#__PURE__*/_jsx(\"p\",{children:\"Redirecting...\"});return/*#__PURE__*/_jsx(ReactFlowProvider,{children:/*#__PURE__*/_jsx(Dashboard,{user:user,companies:companies,currentCompany:currentCompany})});}","map":{"version":3,"names":["React","useEffect","useState","onAuthStateChanged","auth","db","collection","getDocs","Dashboard","useNavigate","ReactFlowProvider","jsx","_jsx","DashboardPage","user","setUser","companies","setCompanies","currentCompany","setCurrentCompany","loading","setLoading","navigate","unsubscribe","firebaseUser","fetchCompanies","snapshot","companyList","docs","map","doc","_objectSpread","id","data","ownCompany","find","c","email","err","console","error","children"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/pages/DashboardPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { onAuthStateChanged } from \"firebase/auth\";\r\nimport { auth, db } from \"../firebase\";\r\nimport { collection, getDocs } from \"firebase/firestore\";\r\nimport Dashboard from \"../components/Dashboard\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport {ReactFlowProvider} from \"reactflow\";\r\n\r\nexport default function DashboardPage() {\r\n    const [user, setUser] = useState(null);\r\n    const [companies, setCompanies] = useState([]);\r\n    const [currentCompany, setCurrentCompany] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    useEffect(() => {\r\n        const unsubscribe = onAuthStateChanged(auth, (firebaseUser) => {\r\n            if (firebaseUser) setUser(firebaseUser);\r\n            else navigate(\"/\");\r\n            setLoading(false);\r\n        });\r\n        return () => unsubscribe();\r\n    }, [navigate]);\r\n\r\n    useEffect(() => {\r\n        const fetchCompanies = async () => {\r\n            if (!user) return;\r\n            try {\r\n                const snapshot = await getDocs(collection(db, \"companies\"));\r\n                const companyList = snapshot.docs.map((doc) => ({ id: doc.id, ...doc.data() }));\r\n                setCompanies(companyList);\r\n                const ownCompany = companyList.find((c) => c.email === user.email);\r\n                setCurrentCompany(ownCompany || null);\r\n            } catch (err) {\r\n                console.error(err);\r\n            }\r\n        };\r\n        fetchCompanies();\r\n    }, [user]);\r\n\r\n    if (loading) return <p>Loading...</p>;\r\n    if (!user) return <p>Redirecting...</p>;\r\n\r\n    return (\r\n        <ReactFlowProvider>\r\n            <Dashboard\r\n            user={user}\r\n            companies={companies}\r\n            currentCompany={currentCompany}\r\n        />\r\n        </ReactFlowProvider>\r\n\r\n    );\r\n}"],"mappings":"gJAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,kBAAkB,KAAQ,eAAe,CAClD,OAASC,IAAI,CAAEC,EAAE,KAAQ,aAAa,CACtC,OAASC,UAAU,CAAEC,OAAO,KAAQ,oBAAoB,CACxD,MAAO,CAAAC,SAAS,KAAM,yBAAyB,CAC/C,OAASC,WAAW,KAAQ,kBAAkB,CAC9C,OAAQC,iBAAiB,KAAO,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE5C,cAAe,SAAS,CAAAC,aAAaA,CAAA,CAAG,CACpC,KAAM,CAACC,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAAC,IAAI,CAAC,CACtC,KAAM,CAACc,SAAS,CAAEC,YAAY,CAAC,CAAGf,QAAQ,CAAC,EAAE,CAAC,CAC9C,KAAM,CAACgB,cAAc,CAAEC,iBAAiB,CAAC,CAAGjB,QAAQ,CAAC,IAAI,CAAC,CAC1D,KAAM,CAACkB,OAAO,CAAEC,UAAU,CAAC,CAAGnB,QAAQ,CAAC,IAAI,CAAC,CAE5C,KAAM,CAAAoB,QAAQ,CAAGb,WAAW,CAAC,CAAC,CAE9BR,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAsB,WAAW,CAAGpB,kBAAkB,CAACC,IAAI,CAAGoB,YAAY,EAAK,CAC3D,GAAIA,YAAY,CAAET,OAAO,CAACS,YAAY,CAAC,CAAC,IACnC,CAAAF,QAAQ,CAAC,GAAG,CAAC,CAClBD,UAAU,CAAC,KAAK,CAAC,CACrB,CAAC,CAAC,CACF,MAAO,IAAME,WAAW,CAAC,CAAC,CAC9B,CAAC,CAAE,CAACD,QAAQ,CAAC,CAAC,CAEdrB,SAAS,CAAC,IAAM,CACZ,KAAM,CAAAwB,cAAc,CAAG,KAAAA,CAAA,GAAY,CAC/B,GAAI,CAACX,IAAI,CAAE,OACX,GAAI,CACA,KAAM,CAAAY,QAAQ,CAAG,KAAM,CAAAnB,OAAO,CAACD,UAAU,CAACD,EAAE,CAAE,WAAW,CAAC,CAAC,CAC3D,KAAM,CAAAsB,WAAW,CAAGD,QAAQ,CAACE,IAAI,CAACC,GAAG,CAAEC,GAAG,EAAAC,aAAA,EAAQC,EAAE,CAAEF,GAAG,CAACE,EAAE,EAAKF,GAAG,CAACG,IAAI,CAAC,CAAC,CAAG,CAAC,CAC/EhB,YAAY,CAACU,WAAW,CAAC,CACzB,KAAM,CAAAO,UAAU,CAAGP,WAAW,CAACQ,IAAI,CAAEC,CAAC,EAAKA,CAAC,CAACC,KAAK,GAAKvB,IAAI,CAACuB,KAAK,CAAC,CAClElB,iBAAiB,CAACe,UAAU,EAAI,IAAI,CAAC,CACzC,CAAE,MAAOI,GAAG,CAAE,CACVC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC,CACtB,CACJ,CAAC,CACDb,cAAc,CAAC,CAAC,CACpB,CAAC,CAAE,CAACX,IAAI,CAAC,CAAC,CAEV,GAAIM,OAAO,CAAE,mBAAOR,IAAA,MAAA6B,QAAA,CAAG,YAAU,CAAG,CAAC,CACrC,GAAI,CAAC3B,IAAI,CAAE,mBAAOF,IAAA,MAAA6B,QAAA,CAAG,gBAAc,CAAG,CAAC,CAEvC,mBACI7B,IAAA,CAACF,iBAAiB,EAAA+B,QAAA,cACd7B,IAAA,CAACJ,SAAS,EACVM,IAAI,CAAEA,IAAK,CACXE,SAAS,CAAEA,SAAU,CACrBE,cAAc,CAAEA,cAAe,CAClC,CAAC,CACiB,CAAC,CAG5B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}