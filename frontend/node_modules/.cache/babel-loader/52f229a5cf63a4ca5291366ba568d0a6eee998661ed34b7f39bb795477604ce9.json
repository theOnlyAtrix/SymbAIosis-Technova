{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\WebstormProjects\\\\SymbAIosisFinalTwo\\\\frontend\\\\src\\\\components\\\\Dashboard.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport Blueprints from \"./Blueprints\";\nimport NodalGraph from \"./NodalGraph\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Dashboard({\n  user,\n  companies = []\n}) {\n  _s();\n  const [currentCompany, setCurrentCompany] = useState(null);\n  const [selectedCompany, setSelectedCompany] = useState(null);\n  const [blueprintOpen, setBlueprintOpen] = useState(false);\n  useEffect(() => {\n    if (!user) return;\n\n    // Find the company corresponding to logged-in user\n    const myCompany = companies.find(c => c.email === user.email);\n    setCurrentCompany(myCompany || null);\n  }, [user, companies]);\n  if (!currentCompany) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading your company data... Please add your company if missing.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  }\n  const otherCompanies = companies.filter(c => c.email && c.email !== currentCompany.email);\n  const handleGenerateBlueprint = async () => {\n    if (!companyName || !description || !goals) {\n      setError(\"Please fill out all fields before generating a blueprint.\");\n      return;\n    }\n    setLoading(true);\n    setError(\"\");\n    setBlueprint(\"\");\n    try {\n      const response = await fetch(\"http://localhost:5000/generateBlueprint\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          companyName,\n          // text input\n          description,\n          // text input\n          goals,\n          // text input\n          companyEmails: [\n          // array of emails\n          currentUserEmail,\n          // your signed-in company\n          targetCompanyEmail // the other company\n          ]\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setError(data.error || \"Failed to generate blueprint.\");\n      } else if (data.blueprint) {\n        setBlueprint(data.blueprint);\n      } else {\n        setError(\"Blueprint generation failed: No content returned.\");\n      }\n    } catch (err) {\n      console.error(\"Error generating blueprint:\", err);\n      setError(\"Network or server error. Please try again.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-3xl font-bold mb-4\",\n      children: [\"Welcome, \", user === null || user === void 0 ? void 0 : user.displayName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-xl font-semibold mb-4\",\n      children: [\"Your Company: \", currentCompany.name || currentCompany.email]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\",\n      children: otherCompanies.map(company => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"border rounded p-4 shadow bg-white\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"font-semibold mb-2\",\n          children: company.name || company.email\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Needs:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 28\n          }, this), \" \", company.needs || \"N/A\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Produces:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 28\n          }, this), \" \", company.waste || \"N/A\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 25\n        }, this), currentCompany && company ? /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleGenerateBlueprint(company),\n          className: \"mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition\",\n          children: \"Generate Blueprint\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 29\n        }, this) : null]\n      }, company.id || company.email, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(NodalGraph, {\n      nodes: companies,\n      edges: []\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this), blueprintOpen && selectedCompany && /*#__PURE__*/_jsxDEV(Blueprints, {\n      currentCompany: currentCompany,\n      targetCompany: selectedCompany,\n      onClose: () => setBlueprintOpen(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n}\n_s(Dashboard, \"rVm8+19ikacCVrXWwO+QRpUS7B0=\");\n_c = Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useState","useEffect","Blueprints","NodalGraph","jsxDEV","_jsxDEV","Dashboard","user","companies","_s","currentCompany","setCurrentCompany","selectedCompany","setSelectedCompany","blueprintOpen","setBlueprintOpen","myCompany","find","c","email","children","fileName","_jsxFileName","lineNumber","columnNumber","otherCompanies","filter","handleGenerateBlueprint","companyName","description","goals","setError","setLoading","setBlueprint","response","fetch","method","headers","body","JSON","stringify","companyEmails","currentUserEmail","targetCompanyEmail","data","json","ok","error","blueprint","err","console","className","displayName","name","map","company","needs","waste","onClick","id","nodes","edges","targetCompany","onClose","_c","$RefreshReg$"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/Dashboard.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Blueprints from \"./Blueprints\";\r\nimport NodalGraph from \"./NodalGraph\";\r\n\r\nexport default function Dashboard({ user, companies = [] }) {\r\n    const [currentCompany, setCurrentCompany] = useState(null);\r\n    const [selectedCompany, setSelectedCompany] = useState(null);\r\n    const [blueprintOpen, setBlueprintOpen] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!user) return;\r\n\r\n        // Find the company corresponding to logged-in user\r\n        const myCompany = companies.find((c) => c.email === user.email);\r\n        setCurrentCompany(myCompany || null);\r\n    }, [user, companies]);\r\n\r\n    if (!currentCompany) {\r\n        return <p>Loading your company data... Please add your company if missing.</p>;\r\n    }\r\n\r\n    const otherCompanies = companies.filter(\r\n        (c) => c.email && c.email !== currentCompany.email\r\n    );\r\n\r\n    const handleGenerateBlueprint = async () => {\r\n        if (!companyName || !description || !goals) {\r\n            setError(\"Please fill out all fields before generating a blueprint.\");\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        setError(\"\");\r\n        setBlueprint(\"\");\r\n\r\n        try {\r\n            const response = await fetch(\"http://localhost:5000/generateBlueprint\", {\r\n                method: \"POST\",\r\n                headers: { \"Content-Type\": \"application/json\" },\r\n                body: JSON.stringify({\r\n                    companyName,          // text input\r\n                    description,          // text input\r\n                    goals,                // text input\r\n                    companyEmails: [      // array of emails\r\n                        currentUserEmail,   // your signed-in company\r\n                        targetCompanyEmail  // the other company\r\n                    ],\r\n                }),\r\n            });\r\n\r\n            const data = await response.json();\r\n\r\n            if (!response.ok) {\r\n                setError(data.error || \"Failed to generate blueprint.\");\r\n            } else if (data.blueprint) {\r\n                setBlueprint(data.blueprint);\r\n            } else {\r\n                setError(\"Blueprint generation failed: No content returned.\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error generating blueprint:\", err);\r\n            setError(\"Network or server error. Please try again.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"p-6\">\r\n            <h2 className=\"text-3xl font-bold mb-4\">Welcome, {user?.displayName}</h2>\r\n\r\n            <h3 className=\"text-xl font-semibold mb-4\">\r\n                Your Company: {currentCompany.name || currentCompany.email}\r\n            </h3>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 mb-6\">\r\n                {otherCompanies.map((company) => (\r\n                    <div key={company.id || company.email} className=\"border rounded p-4 shadow bg-white\">\r\n                        <h4 className=\"font-semibold mb-2\">{company.name || company.email}</h4>\r\n                        <p><strong>Needs:</strong> {company.needs || \"N/A\"}</p>\r\n                        <p><strong>Produces:</strong> {company.waste || \"N/A\"}</p>\r\n                        {currentCompany && company ? (\r\n                            <button\r\n                                onClick={() => handleGenerateBlueprint(company)}\r\n                                className=\"mt-2 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600 transition\"\r\n                            >\r\n                                Generate Blueprint\r\n                            </button>\r\n                        ) : null}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n\r\n            <NodalGraph nodes={companies} edges={[]} />\r\n\r\n            {blueprintOpen && selectedCompany && (\r\n                <Blueprints\r\n                    currentCompany={currentCompany}\r\n                    targetCompany={selectedCompany}\r\n                    onClose={() => setBlueprintOpen(false)}\r\n                />\r\n            )}\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}