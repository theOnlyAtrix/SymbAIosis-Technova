{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\WebstormProjects\\\\SymbAIosisFinalTwo\\\\frontend\\\\src\\\\components\\\\NodalGraph.jsx\",\n  _s = $RefreshSig$();\n// NodalGraph.jsx\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NodalGraph = ({\n  companies,\n  currentUserEmail\n}) => {\n  _s();\n  const [selectedNode, setSelectedNode] = useState(null);\n  if (!companies || companies.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No companies to display on the graph.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Normalize companies data\n  const normalizedCompanies = companies.map(c => ({\n    ...c,\n    produces: Array.isArray(c.produces) ? c.produces : [],\n    needs: Array.isArray(c.needs) ? c.needs : []\n  }));\n  const handleNodeClick = company => {\n    setSelectedNode(company);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"600px\",\n      border: \"1px solid #ddd\",\n      borderRadius: \"12px\"\n    },\n    children: [normalizedCompanies.map((company, index) => {\n      var _company$emails;\n      const x = 100 + index % 5 * 120; // simple grid layout\n      const y = 100 + Math.floor(index / 5) * 120;\n      const isCurrentUserCompany = (_company$emails = company.emails) === null || _company$emails === void 0 ? void 0 : _company$emails.includes(currentUserEmail);\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        onClick: () => handleNodeClick(company),\n        style: {\n          position: \"absolute\",\n          left: x,\n          top: y,\n          width: 60,\n          height: 60,\n          borderRadius: \"50%\",\n          backgroundColor: isCurrentUserCompany ? \"#ef4444\" : \"#4ade80\",\n          // red for current user\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          cursor: \"pointer\",\n          boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\n          textAlign: \"center\",\n          fontSize: \"12px\",\n          color: \"#fff\",\n          padding: \"5px\"\n        },\n        title: company.name,\n        children: company.name\n      }, company.id || company.name, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 21\n      }, this);\n    }), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: \"50%\",\n        bottom: 20,\n        transform: \"translateX(-50%)\",\n        width: \"300px\",\n        maxHeight: \"200px\",\n        overflowY: \"auto\",\n        backgroundColor: \"#f3f4f6\",\n        padding: \"12px\",\n        borderRadius: \"8px\",\n        boxShadow: \"0 2px 12px rgba(0,0,0,0.25)\",\n        zIndex: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          margin: \"0 0 8px 0\"\n        },\n        children: selectedNode.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Produces:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this), \" \", selectedNode.produces.length > 0 ? selectedNode.produces.join(\", \") : \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Needs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 25\n        }, this), \" \", selectedNode.needs.length > 0 ? selectedNode.needs.join(\", \") : \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          marginTop: \"8px\",\n          padding: \"6px 12px\",\n          border: \"none\",\n          borderRadius: \"4px\",\n          backgroundColor: \"#3b82f6\",\n          color: \"#fff\",\n          cursor: \"pointer\"\n        },\n        onClick: () => setSelectedNode(null),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 9\n  }, this);\n};\n_s(NodalGraph, \"RIsWM+4oUpuhWd1/4LbQUcoZ1hw=\");\n_c = NodalGraph;\nexport default NodalGraph;\nvar _c;\n$RefreshReg$(_c, \"NodalGraph\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","NodalGraph","companies","currentUserEmail","_s","selectedNode","setSelectedNode","length","children","fileName","_jsxFileName","lineNumber","columnNumber","normalizedCompanies","map","c","produces","Array","isArray","needs","handleNodeClick","company","style","position","width","height","border","borderRadius","index","_company$emails","x","y","Math","floor","isCurrentUserCompany","emails","includes","onClick","left","top","backgroundColor","display","alignItems","justifyContent","cursor","boxShadow","textAlign","fontSize","color","padding","title","name","id","bottom","transform","maxHeight","overflowY","zIndex","margin","join","marginTop","_c","$RefreshReg$"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/NodalGraph.jsx"],"sourcesContent":["// NodalGraph.jsx\r\nimport React, { useState } from \"react\";\r\n\r\nconst NodalGraph = ({ companies, currentUserEmail }) => {\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n    if (!companies || companies.length === 0) {\r\n        return <p>No companies to display on the graph.</p>;\r\n    }\r\n\r\n    // Normalize companies data\r\n    const normalizedCompanies = companies.map((c) => ({\r\n        ...c,\r\n        produces: Array.isArray(c.produces) ? c.produces : [],\r\n        needs: Array.isArray(c.needs) ? c.needs : [],\r\n    }));\r\n\r\n    const handleNodeClick = (company) => {\r\n        setSelectedNode(company);\r\n    };\r\n\r\n    return (\r\n        <div style={{ position: \"relative\", width: \"100%\", height: \"600px\", border: \"1px solid #ddd\", borderRadius: \"12px\" }}>\r\n            {/* Graph Nodes */}\r\n            {normalizedCompanies.map((company, index) => {\r\n                const x = 100 + (index % 5) * 120; // simple grid layout\r\n                const y = 100 + Math.floor(index / 5) * 120;\r\n\r\n                const isCurrentUserCompany = company.emails?.includes(currentUserEmail);\r\n\r\n                return (\r\n                    <div\r\n                        key={company.id || company.name}\r\n                        onClick={() => handleNodeClick(company)}\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            left: x,\r\n                            top: y,\r\n                            width: 60,\r\n                            height: 60,\r\n                            borderRadius: \"50%\",\r\n                            backgroundColor: isCurrentUserCompany ? \"#ef4444\" : \"#4ade80\", // red for current user\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"center\",\r\n                            cursor: \"pointer\",\r\n                            boxShadow: \"0 2px 8px rgba(0,0,0,0.2)\",\r\n                            textAlign: \"center\",\r\n                            fontSize: \"12px\",\r\n                            color: \"#fff\",\r\n                            padding: \"5px\",\r\n                        }}\r\n                        title={company.name}\r\n                    >\r\n                        {company.name}\r\n                    </div>\r\n                );\r\n            })}\r\n\r\n            {/* Selected Node Bubble */}\r\n            {selectedNode && (\r\n                <div\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: \"50%\",\r\n                        bottom: 20,\r\n                        transform: \"translateX(-50%)\",\r\n                        width: \"300px\",\r\n                        maxHeight: \"200px\",\r\n                        overflowY: \"auto\",\r\n                        backgroundColor: \"#f3f4f6\",\r\n                        padding: \"12px\",\r\n                        borderRadius: \"8px\",\r\n                        boxShadow: \"0 2px 12px rgba(0,0,0,0.25)\",\r\n                        zIndex: 10,\r\n                    }}\r\n                >\r\n                    <h3 style={{ margin: \"0 0 8px 0\" }}>{selectedNode.name}</h3>\r\n                    <p>\r\n                        <strong>Produces:</strong>{\" \"}\r\n                        {selectedNode.produces.length > 0\r\n                            ? selectedNode.produces.join(\", \")\r\n                            : \"None\"}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Needs:</strong>{\" \"}\r\n                        {selectedNode.needs.length > 0\r\n                            ? selectedNode.needs.join(\", \")\r\n                            : \"None\"}\r\n                    </p>\r\n                    <button\r\n                        style={{\r\n                            marginTop: \"8px\",\r\n                            padding: \"6px 12px\",\r\n                            border: \"none\",\r\n                            borderRadius: \"4px\",\r\n                            backgroundColor: \"#3b82f6\",\r\n                            color: \"#fff\",\r\n                            cursor: \"pointer\",\r\n                        }}\r\n                        onClick={() => setSelectedNode(null)}\r\n                    >\r\n                        Close\r\n                    </button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NodalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}