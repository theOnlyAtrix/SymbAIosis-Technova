{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\WebstormProjects\\\\SymbAIosisFinalTwo\\\\frontend\\\\src\\\\components\\\\NodalGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport ReactFlow, { useNodesState, useEdgesState, Controls, Background } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NodalGraph = ({\n  companies,\n  currentUserEmail\n}) => {\n  _s();\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  // Initialize nodes once\n  const initialNodes = companies.map((c, i) => ({\n    id: c.id.toString(),\n    position: c.position || {\n      x: i * 200,\n      y: i * 150\n    },\n    data: {\n      label: c.name,\n      email: c.email,\n      produces: Array.isArray(c.produces) ? c.produces : [],\n      needs: Array.isArray(c.needs) ? c.needs : []\n    },\n    style: {\n      background: c.email === currentUserEmail ? \"red\" : \"#fff\",\n      color: \"#000\",\n      border: \"2px solid #222\",\n      width: 150,\n      height: 50,\n      borderRadius: 50,\n      textAlign: \"center\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }\n  }));\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n\n  // Initialize edges based on produces/needs correlation\n  const initialEdges = [];\n  companies.forEach(c1 => {\n    companies.forEach(c2 => {\n      if (Array.isArray(c1.needs) && Array.isArray(c2.produces) && c1.needs.some(need => c2.produces.includes(need))) {\n        initialEdges.push({\n          id: `e${c2.id}-${c1.id}`,\n          source: c2.id.toString(),\n          target: c1.id.toString(),\n          animated: true,\n          style: {\n            stroke: \"#888\"\n          }\n        });\n      }\n    });\n  });\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onNodeClick: onNodeClick,\n      fitView: true,\n      nodesDraggable: true,\n      nodesConnectable: false,\n      zoomOnScroll: true,\n      zoomOnPinch: true,\n      panOnScroll: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: selectedNode.position.x + 160,\n        top: selectedNode.position.y,\n        background: \"#fff\",\n        padding: \"10px\",\n        borderRadius: \"8px\",\n        border: \"1px solid #222\",\n        boxShadow: \"0px 0px 8px rgba(0,0,0,0.2)\",\n        zIndex: 10\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: selectedNode.data.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Email: \", selectedNode.data.email || \"N/A\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Produces:\", \" \", Array.isArray(selectedNode.data.produces) ? selectedNode.data.produces.join(\", \") : \"N/A\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"Needs:\", \" \", Array.isArray(selectedNode.data.needs) ? selectedNode.data.needs.join(\", \") : \"N/A\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 9\n  }, this);\n};\n_s(NodalGraph, \"WL5l003Ap+zVdQMA4kKGe4qH5xo=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = NodalGraph;\nexport default NodalGraph;\nvar _c;\n$RefreshReg$(_c, \"NodalGraph\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","useNodesState","useEdgesState","Controls","Background","jsxDEV","_jsxDEV","NodalGraph","companies","currentUserEmail","_s","selectedNode","setSelectedNode","initialNodes","map","c","i","id","toString","position","x","y","data","label","name","email","produces","Array","isArray","needs","style","background","color","border","width","height","borderRadius","textAlign","display","justifyContent","alignItems","nodes","setNodes","onNodesChange","initialEdges","forEach","c1","c2","some","need","includes","push","source","target","animated","stroke","edges","setEdges","onEdgesChange","onNodeClick","event","node","children","fitView","nodesDraggable","nodesConnectable","zoomOnScroll","zoomOnPinch","panOnScroll","gap","fileName","_jsxFileName","lineNumber","columnNumber","left","top","padding","boxShadow","zIndex","join","_c","$RefreshReg$"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/NodalGraph.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport ReactFlow, {\r\n    useNodesState,\r\n    useEdgesState,\r\n    Controls,\r\n    Background,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\nconst NodalGraph = ({ companies, currentUserEmail }) => {\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n    // Initialize nodes once\r\n    const initialNodes = companies.map((c, i) => ({\r\n        id: c.id.toString(),\r\n        position: c.position || { x: i * 200, y: i * 150 },\r\n        data: {\r\n            label: c.name,\r\n            email: c.email,\r\n            produces: Array.isArray(c.produces) ? c.produces : [],\r\n            needs: Array.isArray(c.needs) ? c.needs : [],\r\n        },\r\n        style: {\r\n            background: c.email === currentUserEmail ? \"red\" : \"#fff\",\r\n            color: \"#000\",\r\n            border: \"2px solid #222\",\r\n            width: 150,\r\n            height: 50,\r\n            borderRadius: 50,\r\n            textAlign: \"center\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        },\r\n    }));\r\n\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n\r\n    // Initialize edges based on produces/needs correlation\r\n    const initialEdges = [];\r\n    companies.forEach((c1) => {\r\n        companies.forEach((c2) => {\r\n            if (\r\n                Array.isArray(c1.needs) &&\r\n                Array.isArray(c2.produces) &&\r\n                c1.needs.some((need) => c2.produces.includes(need))\r\n            ) {\r\n                initialEdges.push({\r\n                    id: `e${c2.id}-${c1.id}`,\r\n                    source: c2.id.toString(),\r\n                    target: c1.id.toString(),\r\n                    animated: true,\r\n                    style: { stroke: \"#888\" },\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n\r\n    const onNodeClick = useCallback((event, node) => {\r\n        setSelectedNode(node);\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ width: \"100%\", height: \"100%\" }}>\r\n            <ReactFlow\r\n                nodes={nodes}\r\n                edges={edges}\r\n                onNodesChange={onNodesChange}\r\n                onEdgesChange={onEdgesChange}\r\n                onNodeClick={onNodeClick}\r\n                fitView\r\n                nodesDraggable\r\n                nodesConnectable={false}\r\n                zoomOnScroll\r\n                zoomOnPinch\r\n                panOnScroll\r\n            >\r\n                <Background color=\"#aaa\" gap={16} />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            {selectedNode && (\r\n                <div\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: selectedNode.position.x + 160,\r\n                        top: selectedNode.position.y,\r\n                        background: \"#fff\",\r\n                        padding: \"10px\",\r\n                        borderRadius: \"8px\",\r\n                        border: \"1px solid #222\",\r\n                        boxShadow: \"0px 0px 8px rgba(0,0,0,0.2)\",\r\n                        zIndex: 10,\r\n                    }}\r\n                >\r\n                    <strong>{selectedNode.data.label}</strong>\r\n                    <div>Email: {selectedNode.data.email || \"N/A\"}</div>\r\n                    <div>\r\n                        Produces:{\" \"}\r\n                        {Array.isArray(selectedNode.data.produces)\r\n                            ? selectedNode.data.produces.join(\", \")\r\n                            : \"N/A\"}\r\n                    </div>\r\n                    <div>\r\n                        Needs:{\" \"}\r\n                        {Array.isArray(selectedNode.data.needs)\r\n                            ? selectedNode.data.needs.join(\", \")\r\n                            : \"N/A\"}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NodalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}