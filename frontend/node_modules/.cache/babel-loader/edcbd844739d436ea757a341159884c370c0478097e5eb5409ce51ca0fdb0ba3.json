{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\WebstormProjects\\\\SymbAIosisFinalTwo\\\\frontend\\\\src\\\\components\\\\NodalGraph.jsx\",\n  _s = $RefreshSig$();\n// NodalGraph.jsx\nimport React, { useState, useCallback } from \"react\";\nimport ReactFlow, { ReactFlowProvider, Background, Controls, useNodesState, useEdgesState } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NodalGraph = ({\n  companies,\n  currentUserEmail\n}) => {\n  _s();\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  // Initialize nodes with positions\n  const initialNodes = companies.map((c, i) => ({\n    id: c.id.toString(),\n    position: c.position || {\n      x: i * 200,\n      y: i * 150\n    },\n    data: {\n      label: c.name,\n      email: c.email,\n      produces: Array.isArray(c.produces) ? c.produces : [],\n      needs: Array.isArray(c.needs) ? c.needs : []\n    },\n    style: {\n      background: c.email === currentUserEmail ? \"red\" : \"#fff\",\n      color: \"#000\",\n      border: \"2px solid #222\",\n      width: 150,\n      height: 50,\n      borderRadius: 50,\n      textAlign: \"center\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\"\n    }\n  }));\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const edges = [];\n  companies.forEach(c1 => {\n    companies.forEach(c2 => {\n      var _c1$needs;\n      if ((_c1$needs = c1.needs) !== null && _c1$needs !== void 0 && _c1$needs.some(n => {\n        var _c2$produces;\n        return (_c2$produces = c2.produces) === null || _c2$produces === void 0 ? void 0 : _c2$produces.includes(n);\n      })) {\n        edges.push({\n          id: `e${c1.id}-${c2.id}`,\n          source: c1.id.toString(),\n          target: c2.id.toString(),\n          animated: true,\n          style: {\n            stroke: \"#888\"\n          }\n        });\n      }\n    });\n  });\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ReactFlowProvider, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\",\n        height: \"80vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n        nodes: nodes,\n        edges: edges,\n        onNodesChange: onNodesChange,\n        onEdgesChange: onEdgesChange,\n        onNodeClick: onNodeClick,\n        fitView: true,\n        children: [/*#__PURE__*/_jsxDEV(Background, {\n          color: \"#aaa\",\n          gap: 16\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          position: \"absolute\",\n          left: selectedNode.position.x + 160,\n          // offset to the right\n          top: selectedNode.position.y,\n          background: \"#fff\",\n          padding: \"10px\",\n          borderRadius: \"8px\",\n          border: \"1px solid #222\",\n          boxShadow: \"0px 0px 8px rgba(0,0,0,0.2)\",\n          zIndex: 10\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedNode.data.label\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Email: \", selectedNode.data.email || \"N/A\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Produces:\", \" \", Array.isArray(selectedNode.data.produces) ? selectedNode.data.produces.join(\", \") : \"N/A\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"Needs:\", \" \", Array.isArray(selectedNode.data.needs) ? selectedNode.data.needs.join(\", \") : \"N/A\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(NodalGraph, \"KLL83gtBEbH4IRcmRImtoQMzpAA=\", false, function () {\n  return [useNodesState];\n});\n_c = NodalGraph;\nexport default NodalGraph;\nvar _c;\n$RefreshReg$(_c, \"NodalGraph\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","ReactFlowProvider","Background","Controls","useNodesState","useEdgesState","jsxDEV","_jsxDEV","NodalGraph","companies","currentUserEmail","_s","selectedNode","setSelectedNode","initialNodes","map","c","i","id","toString","position","x","y","data","label","name","email","produces","Array","isArray","needs","style","background","color","border","width","height","borderRadius","textAlign","display","justifyContent","alignItems","nodes","setNodes","onNodesChange","edges","forEach","c1","c2","_c1$needs","some","n","_c2$produces","includes","push","source","target","animated","stroke","onNodeClick","event","node","children","onEdgesChange","fitView","gap","fileName","_jsxFileName","lineNumber","columnNumber","left","top","padding","boxShadow","zIndex","join","_c","$RefreshReg$"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/NodalGraph.jsx"],"sourcesContent":["// NodalGraph.jsx\r\nimport React, { useState, useCallback } from \"react\";\r\nimport ReactFlow, {\r\n    ReactFlowProvider,\r\n    Background,\r\n    Controls,\r\n    useNodesState,\r\n    useEdgesState,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\nconst NodalGraph = ({ companies, currentUserEmail }) => {\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n    // Initialize nodes with positions\r\n    const initialNodes = companies.map((c, i) => ({\r\n        id: c.id.toString(),\r\n        position: c.position || { x: i * 200, y: i * 150 },\r\n        data: {\r\n            label: c.name,\r\n            email: c.email,\r\n            produces: Array.isArray(c.produces) ? c.produces : [],\r\n            needs: Array.isArray(c.needs) ? c.needs : [],\r\n        },\r\n        style: {\r\n            background: c.email === currentUserEmail ? \"red\" : \"#fff\",\r\n            color: \"#000\",\r\n            border: \"2px solid #222\",\r\n            width: 150,\r\n            height: 50,\r\n            borderRadius: 50,\r\n            textAlign: \"center\",\r\n            display: \"flex\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n        },\r\n    }));\r\n\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n    const edges = [];\r\n    companies.forEach((c1) => {\r\n        companies.forEach((c2) => {\r\n            if (c1.needs?.some(n => c2.produces?.includes(n))) {\r\n                edges.push({\r\n                    id: `e${c1.id}-${c2.id}`,\r\n                    source: c1.id.toString(),\r\n                    target: c2.id.toString(),\r\n                    animated: true,\r\n                    style: { stroke: \"#888\" },\r\n                });\r\n            }\r\n        });\r\n    });\r\n\r\n    const onNodeClick = useCallback((event, node) => {\r\n        setSelectedNode(node);\r\n    }, []);\r\n\r\n    return (\r\n        <ReactFlowProvider>\r\n            <div style={{ width: \"100%\", height: \"80vh\" }}>\r\n                <ReactFlow\r\n                    nodes={nodes}\r\n                    edges={edges}\r\n                    onNodesChange={onNodesChange}\r\n                    onEdgesChange={onEdgesChange}\r\n                    onNodeClick={onNodeClick}\r\n                    fitView\r\n                >\r\n                    <Background color=\"#aaa\" gap={16} />\r\n                    <Controls />\r\n                </ReactFlow>\r\n\r\n                {/* Bubble for selected node */}\r\n                {selectedNode && (\r\n                    <div\r\n                        style={{\r\n                            position: \"absolute\",\r\n                            left: selectedNode.position.x + 160, // offset to the right\r\n                            top: selectedNode.position.y,\r\n                            background: \"#fff\",\r\n                            padding: \"10px\",\r\n                            borderRadius: \"8px\",\r\n                            border: \"1px solid #222\",\r\n                            boxShadow: \"0px 0px 8px rgba(0,0,0,0.2)\",\r\n                            zIndex: 10,\r\n                        }}\r\n                    >\r\n                        <strong>{selectedNode.data.label}</strong>\r\n                        <div>Email: {selectedNode.data.email || \"N/A\"}</div>\r\n                        <div>\r\n                            Produces:{\" \"}\r\n                            {Array.isArray(selectedNode.data.produces)\r\n                                ? selectedNode.data.produces.join(\", \")\r\n                                : \"N/A\"}\r\n                        </div>\r\n                        <div>\r\n                            Needs:{\" \"}\r\n                            {Array.isArray(selectedNode.data.needs)\r\n                                ? selectedNode.data.needs.join(\", \")\r\n                                : \"N/A\"}\r\n                        </div>\r\n                    </div>\r\n                )}\r\n            </div>\r\n        </ReactFlowProvider>\r\n    );\r\n};\r\n\r\nexport default NodalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}