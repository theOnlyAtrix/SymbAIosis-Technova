{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\WebstormProjects\\\\SymbAIosisFinalTwo\\\\frontend\\\\src\\\\components\\\\NodalGraph.jsx\",\n  _s = $RefreshSig$();\n// src/components/NodalGraph.jsx\nimport React, { useState, useEffect } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, MarkerType } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\n\n// Utility: check if two companies have a correlation\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst hasCorrelation = (companyA, companyB) => {\n  const aProduces = Array.isArray(companyA.produces) ? companyA.produces : [];\n  const aNeeds = Array.isArray(companyA.needs) ? companyA.needs : [];\n  const bProduces = Array.isArray(companyB.produces) ? companyB.produces : [];\n  const bNeeds = Array.isArray(companyB.needs) ? companyB.needs : [];\n  const aProducesBNeeds = aProduces.some(item => bNeeds.includes(item));\n  const bProducesANeeds = bProduces.some(item => aNeeds.includes(item));\n  return {\n    oneWay: aProducesBNeeds && !bProducesANeeds,\n    twoWay: aProducesBNeeds && bProducesANeeds\n  };\n};\nconst NodalGraph = ({\n  companies\n}) => {\n  _s();\n  var _selectedNode$data$co, _selectedNode$data$co2;\n  const [nodes, setNodes] = useState([]);\n  const [edges, setEdges] = useState([]);\n  const [selectedNode, setSelectedNode] = useState(null);\n  useEffect(() => {\n    if (!companies || companies.length === 0) return;\n\n    // Convert companies to nodes\n    const newNodes = companies.map((c, index) => ({\n      id: c.id,\n      data: {\n        label: c.name,\n        company: c\n      },\n      position: {\n        x: Math.random() * 800 + 50,\n        y: Math.random() * 500 + 50\n      },\n      style: {\n        background: \"#4ade80\",\n        color: \"#fff\",\n        border: \"2px solid #16a34a\",\n        width: 120,\n        height: 40,\n        borderRadius: 25,\n        textAlign: \"center\",\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        cursor: \"pointer\"\n      }\n    }));\n\n    // Create edges based on correlation\n    const newEdges = [];\n    companies.forEach(a => {\n      companies.forEach(b => {\n        if (a.id === b.id) return;\n        const {\n          oneWay,\n          twoWay\n        } = hasCorrelation(a, b);\n        if (oneWay || twoWay) {\n          newEdges.push({\n            id: `${a.id}-${b.id}`,\n            source: a.id,\n            target: b.id,\n            animated: oneWay,\n            style: {\n              stroke: twoWay ? \"#2563eb\" : \"#facc15\",\n              strokeWidth: 2\n            },\n            markerEnd: {\n              type: MarkerType.ArrowClosed,\n              color: twoWay ? \"#2563eb\" : \"#facc15\"\n            }\n          });\n        }\n      });\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [companies]);\n  const onNodeClick = (_, node) => {\n    setSelectedNode(node);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"600px\",\n      width: \"100%\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodeClick: onNodeClick,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: n => n.style.background ? n.style.background : \"#000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        color: \"#aaa\",\n        gap: 16\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 13\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: selectedNode.position.y + 50,\n        left: selectedNode.position.x + 50,\n        background: \"#fff\",\n        padding: \"15px\",\n        borderRadius: \"12px\",\n        boxShadow: \"0 4px 15px rgba(0,0,0,0.25)\",\n        zIndex: 10,\n        maxWidth: \"220px\",\n        wordWrap: \"break-word\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: 0,\n          marginBottom: \"5px\"\n        },\n        children: selectedNode.data.company.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: 0,\n          fontSize: \"13px\"\n        },\n        children: [\"Produces: \", ((_selectedNode$data$co = selectedNode.data.company.produces) === null || _selectedNode$data$co === void 0 ? void 0 : _selectedNode$data$co.join(\", \")) || \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          margin: 0,\n          fontSize: \"13px\"\n        },\n        children: [\"Needs: \", ((_selectedNode$data$co2 = selectedNode.data.company.needs) === null || _selectedNode$data$co2 === void 0 ? void 0 : _selectedNode$data$co2.join(\", \")) || \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 9\n  }, this);\n};\n_s(NodalGraph, \"yZQ8kvy4rp3WwXChUZOkLPbMWSw=\");\n_c = NodalGraph;\nexport default NodalGraph;\nvar _c;\n$RefreshReg$(_c, \"NodalGraph\");","map":{"version":3,"names":["React","useState","useEffect","ReactFlow","MiniMap","Controls","Background","MarkerType","jsxDEV","_jsxDEV","hasCorrelation","companyA","companyB","aProduces","Array","isArray","produces","aNeeds","needs","bProduces","bNeeds","aProducesBNeeds","some","item","includes","bProducesANeeds","oneWay","twoWay","NodalGraph","companies","_s","_selectedNode$data$co","_selectedNode$data$co2","nodes","setNodes","edges","setEdges","selectedNode","setSelectedNode","length","newNodes","map","c","index","id","data","label","name","company","position","x","Math","random","y","style","background","color","border","width","height","borderRadius","textAlign","display","alignItems","justifyContent","cursor","newEdges","forEach","a","b","push","source","target","animated","stroke","strokeWidth","markerEnd","type","ArrowClosed","onNodeClick","_","node","children","fitView","nodeColor","n","fileName","_jsxFileName","lineNumber","columnNumber","gap","top","left","padding","boxShadow","zIndex","maxWidth","wordWrap","margin","marginBottom","fontSize","join","_c","$RefreshReg$"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/NodalGraph.jsx"],"sourcesContent":["// src/components/NodalGraph.jsx\r\nimport React, { useState, useEffect } from \"react\";\r\nimport ReactFlow, {\r\n    MiniMap,\r\n    Controls,\r\n    Background,\r\n    MarkerType,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\n// Utility: check if two companies have a correlation\r\nconst hasCorrelation = (companyA, companyB) => {\r\n    const aProduces = Array.isArray(companyA.produces) ? companyA.produces : [];\r\n    const aNeeds = Array.isArray(companyA.needs) ? companyA.needs : [];\r\n    const bProduces = Array.isArray(companyB.produces) ? companyB.produces : [];\r\n    const bNeeds = Array.isArray(companyB.needs) ? companyB.needs : [];\r\n\r\n    const aProducesBNeeds = aProduces.some((item) => bNeeds.includes(item));\r\n    const bProducesANeeds = bProduces.some((item) => aNeeds.includes(item));\r\n\r\n    return { oneWay: aProducesBNeeds && !bProducesANeeds, twoWay: aProducesBNeeds && bProducesANeeds };\r\n};\r\n\r\nconst NodalGraph = ({ companies }) => {\r\n    const [nodes, setNodes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!companies || companies.length === 0) return;\r\n\r\n        // Convert companies to nodes\r\n        const newNodes = companies.map((c, index) => ({\r\n            id: c.id,\r\n            data: { label: c.name, company: c },\r\n            position: {\r\n                x: Math.random() * 800 + 50,\r\n                y: Math.random() * 500 + 50,\r\n            },\r\n            style: {\r\n                background: \"#4ade80\",\r\n                color: \"#fff\",\r\n                border: \"2px solid #16a34a\",\r\n                width: 120,\r\n                height: 40,\r\n                borderRadius: 25,\r\n                textAlign: \"center\",\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                justifyContent: \"center\",\r\n                cursor: \"pointer\",\r\n            },\r\n        }));\r\n\r\n        // Create edges based on correlation\r\n        const newEdges = [];\r\n        companies.forEach((a) => {\r\n            companies.forEach((b) => {\r\n                if (a.id === b.id) return;\r\n                const { oneWay, twoWay } = hasCorrelation(a, b);\r\n                if (oneWay || twoWay) {\r\n                    newEdges.push({\r\n                        id: `${a.id}-${b.id}`,\r\n                        source: a.id,\r\n                        target: b.id,\r\n                        animated: oneWay,\r\n                        style: { stroke: twoWay ? \"#2563eb\" : \"#facc15\", strokeWidth: 2 },\r\n                        markerEnd: {\r\n                            type: MarkerType.ArrowClosed,\r\n                            color: twoWay ? \"#2563eb\" : \"#facc15\",\r\n                        },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        setNodes(newNodes);\r\n        setEdges(newEdges);\r\n    }, [companies]);\r\n\r\n    const onNodeClick = (_, node) => {\r\n        setSelectedNode(node);\r\n    };\r\n\r\n    return (\r\n        <div style={{ height: \"600px\", width: \"100%\", position: \"relative\" }}>\r\n            <ReactFlow nodes={nodes} edges={edges} onNodeClick={onNodeClick} fitView>\r\n                <MiniMap nodeColor={(n) => (n.style.background ? n.style.background : \"#000\")} />\r\n                <Controls />\r\n                <Background color=\"#aaa\" gap={16} />\r\n            </ReactFlow>\r\n\r\n            {selectedNode && (\r\n                <div\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        top: selectedNode.position.y + 50,\r\n                        left: selectedNode.position.x + 50,\r\n                        background: \"#fff\",\r\n                        padding: \"15px\",\r\n                        borderRadius: \"12px\",\r\n                        boxShadow: \"0 4px 15px rgba(0,0,0,0.25)\",\r\n                        zIndex: 10,\r\n                        maxWidth: \"220px\",\r\n                        wordWrap: \"break-word\",\r\n                    }}\r\n                >\r\n                    <h4 style={{ margin: 0, marginBottom: \"5px\" }}>{selectedNode.data.company.name}</h4>\r\n                    <p style={{ margin: 0, fontSize: \"13px\" }}>\r\n                        Produces: {selectedNode.data.company.produces?.join(\", \") || \"None\"}\r\n                    </p>\r\n                    <p style={{ margin: 0, fontSize: \"13px\" }}>\r\n                        Needs: {selectedNode.data.company.needs?.join(\", \") || \"None\"}\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NodalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}