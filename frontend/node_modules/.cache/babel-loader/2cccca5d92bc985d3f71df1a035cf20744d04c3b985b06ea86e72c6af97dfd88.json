{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\WebstormProjects\\\\SymbAIosisFinalTwo\\\\frontend\\\\src\\\\components\\\\NodalGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from \"react\";\nimport ReactFlow, { Controls, Background, MiniMap, useNodesState, useEdgesState } from \"reactflow\";\nimport \"reactflow/dist/style.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function NodalGraph({\n  companies,\n  currentUserEmail\n}) {\n  _s();\n  // Nodes and edges state\n  const [nodes, setNodes, onNodesChange] = useNodesState([]);\n  const [edges, setEdges, onEdgesChange] = useEdgesState([]);\n\n  // Currently selected node\n  const [selectedNode, setSelectedNode] = useState(null);\n\n  // Build nodes and edges from companies\n  useEffect(() => {\n    if (!companies || companies.length === 0) return;\n    const newNodes = companies.map((company, idx) => ({\n      id: company.id,\n      position: {\n        x: 200 + idx * 150,\n        y: 200 + idx % 3 * 100\n      },\n      data: {\n        label: company.name,\n        company\n      },\n      style: {\n        border: Array.isArray(company.emails) && company.emails.includes(currentUserEmail) ? \"2px solid red\" : \"1px solid #777\",\n        borderRadius: \"50%\",\n        padding: 10,\n        backgroundColor: \"#fff\"\n      }\n    }));\n    const newEdges = [];\n    companies.forEach(a => {\n      if (!Array.isArray(a.produces)) return;\n      companies.forEach(b => {\n        if (!Array.isArray(b.needs)) return;\n        if (a.produces.some(item => b.needs.includes(item))) {\n          newEdges.push({\n            id: `e-${a.id}-${b.id}`,\n            source: a.id,\n            target: b.id,\n            animated: true,\n            style: {\n              stroke: \"#888\"\n            }\n          });\n        }\n      });\n    });\n    setNodes(newNodes);\n    setEdges(newEdges);\n  }, [companies, currentUserEmail, setNodes, setEdges]);\n\n  // Node click handler\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: \"100%\",\n      height: \"600px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onNodeClick: onNodeClick,\n      fitView: true,\n      zoomOnScroll: true,\n      panOnDrag: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        gap: 16,\n        size: 1,\n        color: \"#aaa\",\n        variant: \"dots\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {\n        nodeColor: node => Array.isArray(node.data.company.emails) && node.data.company.emails.includes(currentUserEmail) ? \"red\" : \"#00ff00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        left: selectedNode.position.x + 50,\n        top: selectedNode.position.y - 20,\n        backgroundColor: \"#fff\",\n        border: \"1px solid #ccc\",\n        padding: \"8px\",\n        borderRadius: \"4px\",\n        zIndex: 10,\n        pointerEvents: \"none\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: selectedNode.data.company.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: selectedNode.data.company.emails.join(\", \")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 9\n  }, this);\n}\n_s(NodalGraph, \"Iu9DEAH9eDxELRnAv0GeTbeKSCs=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = NodalGraph;\nvar _c;\n$RefreshReg$(_c, \"NodalGraph\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","ReactFlow","Controls","Background","MiniMap","useNodesState","useEdgesState","jsxDEV","_jsxDEV","NodalGraph","companies","currentUserEmail","_s","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","selectedNode","setSelectedNode","length","newNodes","map","company","idx","id","position","x","y","data","label","name","style","border","Array","isArray","emails","includes","borderRadius","padding","backgroundColor","newEdges","forEach","a","produces","b","needs","some","item","push","source","target","animated","stroke","onNodeClick","event","node","width","height","children","fitView","zoomOnScroll","panOnDrag","gap","size","color","variant","fileName","_jsxFileName","lineNumber","columnNumber","nodeColor","left","top","zIndex","pointerEvents","join","_c","$RefreshReg$"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/NodalGraph.jsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from \"react\";\r\nimport ReactFlow, {\r\n    Controls,\r\n    Background,\r\n    MiniMap,\r\n    useNodesState,\r\n    useEdgesState,\r\n} from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\nexport default function NodalGraph({ companies, currentUserEmail }) {\r\n    // Nodes and edges state\r\n    const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n\r\n    // Currently selected node\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n    // Build nodes and edges from companies\r\n    useEffect(() => {\r\n        if (!companies || companies.length === 0) return;\r\n\r\n        const newNodes = companies.map((company, idx) => ({\r\n            id: company.id,\r\n            position: { x: 200 + idx * 150, y: 200 + (idx % 3) * 100 },\r\n            data: { label: company.name, company },\r\n            style: {\r\n                border:\r\n                    Array.isArray(company.emails) && company.emails.includes(currentUserEmail)\r\n                        ? \"2px solid red\"\r\n                        : \"1px solid #777\",\r\n                borderRadius: \"50%\",\r\n                padding: 10,\r\n                backgroundColor: \"#fff\",\r\n            },\r\n        }));\r\n\r\n        const newEdges = [];\r\n        companies.forEach((a) => {\r\n            if (!Array.isArray(a.produces)) return;\r\n            companies.forEach((b) => {\r\n                if (!Array.isArray(b.needs)) return;\r\n                if (a.produces.some((item) => b.needs.includes(item))) {\r\n                    newEdges.push({\r\n                        id: `e-${a.id}-${b.id}`,\r\n                        source: a.id,\r\n                        target: b.id,\r\n                        animated: true,\r\n                        style: { stroke: \"#888\" },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        setNodes(newNodes);\r\n        setEdges(newEdges);\r\n    }, [companies, currentUserEmail, setNodes, setEdges]);\r\n\r\n    // Node click handler\r\n    const onNodeClick = useCallback((event, node) => {\r\n        setSelectedNode(node);\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ width: \"100%\", height: \"600px\" }}>\r\n            <ReactFlow\r\n                nodes={nodes}\r\n                edges={edges}\r\n                onNodesChange={onNodesChange}\r\n                onEdgesChange={onEdgesChange}\r\n                onNodeClick={onNodeClick}\r\n                fitView\r\n                zoomOnScroll\r\n                panOnDrag\r\n            >\r\n                <Background\r\n                    gap={16}\r\n                    size={1}\r\n                    color=\"#aaa\"\r\n                    variant=\"dots\"\r\n                />\r\n                <MiniMap\r\n                    nodeColor={(node) =>\r\n                        Array.isArray(node.data.company.emails) &&\r\n                        node.data.company.emails.includes(currentUserEmail)\r\n                            ? \"red\"\r\n                            : \"#00ff00\"\r\n                    }\r\n                />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            {/* Display selected company info */}\r\n            {selectedNode && (\r\n                <div\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: selectedNode.position.x + 50,\r\n                        top: selectedNode.position.y - 20,\r\n                        backgroundColor: \"#fff\",\r\n                        border: \"1px solid #ccc\",\r\n                        padding: \"8px\",\r\n                        borderRadius: \"4px\",\r\n                        zIndex: 10,\r\n                        pointerEvents: \"none\",\r\n                    }}\r\n                >\r\n                    <strong>{selectedNode.data.company.name}</strong>\r\n                    <div>\r\n                        {selectedNode.data.company.emails.join(\", \")}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}