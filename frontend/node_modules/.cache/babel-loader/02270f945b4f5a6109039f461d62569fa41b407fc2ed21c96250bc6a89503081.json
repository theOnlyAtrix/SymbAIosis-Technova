{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\WebstormProjects\\\\SymbAIosisFinalTwo\\\\frontend\\\\src\\\\components\\\\NodalGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from \"react-flow-renderer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NodalGraph = ({\n  companies,\n  currentUserEmail\n}) => {\n  _s();\n  // Convert companies to nodes and edges\n  const generateGraphData = () => {\n    const nodes = companies.map((company, index) => ({\n      id: company.email,\n      data: {\n        label: company.name,\n        company\n      },\n      position: {\n        x: Math.random() * 600,\n        y: Math.random() * 400\n      },\n      style: {\n        background: company.email === currentUserEmail ? \"#ff4d4f\" : \"#00bfff\",\n        // red for current user\n        color: \"#fff\",\n        border: \"1px solid #222138\",\n        width: 150,\n        padding: 10\n      }\n    }));\n    const edges = [];\n    companies.forEach(companyA => {\n      companies.forEach(companyB => {\n        if (companyA !== companyB) {\n          const produces = Array.isArray(companyA.produces) ? companyA.produces : [];\n          const needs = Array.isArray(companyB.needs) ? companyB.needs : [];\n          const correlation = produces.some(item => needs.includes(item));\n          if (correlation) {\n            edges.push({\n              id: `${companyA.email}-${companyB.email}`,\n              source: companyA.email,\n              target: companyB.email,\n              animated: true,\n              style: {\n                stroke: \"#888\"\n              }\n            });\n          }\n        }\n      });\n    });\n    return {\n      nodes,\n      edges\n    };\n  };\n  const {\n    nodes: initialNodes,\n    edges: initialEdges\n  } = generateGraphData();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const onNodeClick = useCallback((event, node) => {\n    setSelectedNode(node);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"600px\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onNodeClick: onNodeClick,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1,\n        color: \"#aaa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: selectedNode.position.y + 70,\n        left: selectedNode.position.x + 70,\n        background: \"#fff\",\n        padding: \"10px\",\n        border: \"1px solid #222\",\n        borderRadius: \"5px\",\n        zIndex: 10,\n        maxWidth: \"250px\",\n        wordWrap: \"break-word\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: selectedNode.data.company.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 24\n        }, this), \" \", Array.isArray(selectedNode.data.company.emails) ? selectedNode.data.company.emails.join(\", \") : \"No emails available\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Produces:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 24\n        }, this), \" \", Array.isArray(selectedNode.data.company.produces) ? selectedNode.data.company.produces.join(\", \") : \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Needs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 24\n        }, this), \" \", Array.isArray(selectedNode.data.company.needs) ? selectedNode.data.company.needs.join(\", \") : \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n};\n_s(NodalGraph, \"0zBcLqUUAPlywXIj+uk4UoxXZ/M=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = NodalGraph;\nexport default NodalGraph;\nvar _c;\n$RefreshReg$(_c, \"NodalGraph\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","NodalGraph","companies","currentUserEmail","_s","generateGraphData","nodes","map","company","index","id","email","data","label","name","position","x","Math","random","y","style","background","color","border","width","padding","edges","forEach","companyA","companyB","produces","Array","isArray","needs","correlation","some","item","includes","push","source","target","animated","stroke","initialNodes","initialEdges","setNodes","onNodesChange","setEdges","onEdgesChange","selectedNode","setSelectedNode","onNodeClick","event","node","height","children","fitView","variant","gap","size","fileName","_jsxFileName","lineNumber","columnNumber","top","left","borderRadius","zIndex","maxWidth","wordWrap","emails","join","_c","$RefreshReg$"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/NodalGraph.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport ReactFlow, {\r\n    MiniMap,\r\n    Controls,\r\n    Background,\r\n    useNodesState,\r\n    useEdgesState,\r\n} from \"react-flow-renderer\";\r\n\r\nconst NodalGraph = ({ companies, currentUserEmail }) => {\r\n    // Convert companies to nodes and edges\r\n    const generateGraphData = () => {\r\n        const nodes = companies.map((company, index) => ({\r\n            id: company.email,\r\n            data: { label: company.name, company },\r\n            position: { x: Math.random() * 600, y: Math.random() * 400 },\r\n            style: {\r\n                background:\r\n                    company.email === currentUserEmail ? \"#ff4d4f\" : \"#00bfff\", // red for current user\r\n                color: \"#fff\",\r\n                border: \"1px solid #222138\",\r\n                width: 150,\r\n                padding: 10,\r\n            },\r\n        }));\r\n\r\n        const edges = [];\r\n        companies.forEach((companyA) => {\r\n            companies.forEach((companyB) => {\r\n                if (companyA !== companyB) {\r\n                    const produces = Array.isArray(companyA.produces) ? companyA.produces : [];\r\n                    const needs = Array.isArray(companyB.needs) ? companyB.needs : [];\r\n                    const correlation = produces.some((item) => needs.includes(item));\r\n                    if (correlation) {\r\n                        edges.push({\r\n                            id: `${companyA.email}-${companyB.email}`,\r\n                            source: companyA.email,\r\n                            target: companyB.email,\r\n                            animated: true,\r\n                            style: { stroke: \"#888\" },\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return { nodes, edges };\r\n    };\r\n\r\n    const { nodes: initialNodes, edges: initialEdges } = generateGraphData();\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n    const onNodeClick = useCallback((event, node) => {\r\n        setSelectedNode(node);\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ height: \"600px\", width: \"100%\" }}>\r\n            <ReactFlow\r\n                nodes={nodes}\r\n                edges={edges}\r\n                onNodesChange={onNodesChange}\r\n                onEdgesChange={onEdgesChange}\r\n                onNodeClick={onNodeClick}\r\n                fitView\r\n            >\r\n                <Background\r\n                    variant=\"dots\"\r\n                    gap={12}\r\n                    size={1}\r\n                    color=\"#aaa\"\r\n                />\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            {selectedNode && (\r\n                <div\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        top: selectedNode.position.y + 70,\r\n                        left: selectedNode.position.x + 70,\r\n                        background: \"#fff\",\r\n                        padding: \"10px\",\r\n                        border: \"1px solid #222\",\r\n                        borderRadius: \"5px\",\r\n                        zIndex: 10,\r\n                        maxWidth: \"250px\",\r\n                        wordWrap: \"break-word\",\r\n                    }}\r\n                >\r\n                    <h4>{selectedNode.data.company.name}</h4>\r\n                    <p><strong>Email:</strong>{\" \"}\r\n                        {Array.isArray(selectedNode.data.company.emails)\r\n                            ? selectedNode.data.company.emails.join(\", \")\r\n                            : \"No emails available\"}\r\n                    </p>\r\n                    <p><strong>Produces:</strong>{\" \"}\r\n                        {Array.isArray(selectedNode.data.company.produces)\r\n                            ? selectedNode.data.company.produces.join(\", \")\r\n                            : \"None\"}\r\n                    </p>\r\n                    <p><strong>Needs:</strong>{\" \"}\r\n                        {Array.isArray(selectedNode.data.company.needs)\r\n                            ? selectedNode.data.company.needs.join(\", \")\r\n                            : \"None\"}\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NodalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}