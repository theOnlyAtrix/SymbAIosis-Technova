{"ast":null,"code":"import React,{useState,useCallback,useEffect}from\"react\";import ReactFlow,{useNodesState,useEdgesState,Controls,Background}from\"reactflow\";import\"reactflow/dist/style.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const NodalGraph=_ref=>{let{companies,currentUserEmail}=_ref;const[selectedNode,setSelectedNode]=useState(null);const[nodes,setNodes,onNodesChange]=useNodesState([]);const[edges,setEdges,onEdgesChange]=useEdgesState([]);// Build nodes and edges whenever companies array changes\nuseEffect(()=>{if(!companies||companies.length===0)return;const newNodes=companies.map((c,i)=>({id:c.id.toString(),position:c.position||{x:i*200,y:i*150},data:{label:c.name,email:c.email,produces:Array.isArray(c.produces)?c.produces:[],needs:Array.isArray(c.needs)?c.needs:[]},style:{background:c.email===currentUserEmail?\"red\":\"#fff\",color:\"#000\",border:\"2px solid #222\",width:150,height:50,borderRadius:50,textAlign:\"center\",display:\"flex\",justifyContent:\"center\",alignItems:\"center\"}}));const newEdges=[];companies.forEach(c1=>{companies.forEach(c2=>{if(Array.isArray(c1.needs)&&Array.isArray(c2.produces)&&c1.needs.some(need=>c2.produces.includes(need))){newEdges.push({id:\"e\".concat(c2.id,\"-\").concat(c1.id),source:c2.id.toString(),target:c1.id.toString(),animated:true,style:{stroke:\"#888\"}});}});});setNodes(newNodes);setEdges(newEdges);},[companies,currentUserEmail]);const onNodeClick=useCallback((event,node)=>{setSelectedNode(node);},[]);return/*#__PURE__*/_jsxs(\"div\",{style:{width:\"100%\",height:\"100%\"},children:[/*#__PURE__*/_jsxs(ReactFlow,{nodes:nodes,edges:edges,onNodesChange:onNodesChange,onEdgesChange:onEdgesChange,onNodeClick:onNodeClick,fitView:true,nodesDraggable:true,nodesConnectable:false,zoomOnScroll:true,zoomOnPinch:true,panOnScroll:true,children:[/*#__PURE__*/_jsx(Background,{color:\"#aaa\",gap:16}),/*#__PURE__*/_jsx(Controls,{})]}),selectedNode&&/*#__PURE__*/_jsxs(\"div\",{style:{position:\"absolute\",left:selectedNode.position.x+160,top:selectedNode.position.y,background:\"#fff\",padding:\"10px\",borderRadius:\"8px\",border:\"1px solid #222\",boxShadow:\"0px 0px 8px rgba(0,0,0,0.2)\",zIndex:10},children:[/*#__PURE__*/_jsx(\"strong\",{children:selectedNode.data.label}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Email: \",selectedNode.data.email||\"N/A\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Produces:\",\" \",Array.isArray(selectedNode.data.produces)?selectedNode.data.produces.join(\", \"):\"N/A\"]}),/*#__PURE__*/_jsxs(\"div\",{children:[\"Needs:\",\" \",Array.isArray(selectedNode.data.needs)?selectedNode.data.needs.join(\", \"):\"N/A\"]})]})]});};export default NodalGraph;","map":{"version":3,"names":["React","useState","useCallback","useEffect","ReactFlow","useNodesState","useEdgesState","Controls","Background","jsx","_jsx","jsxs","_jsxs","NodalGraph","_ref","companies","currentUserEmail","selectedNode","setSelectedNode","nodes","setNodes","onNodesChange","edges","setEdges","onEdgesChange","length","newNodes","map","c","i","id","toString","position","x","y","data","label","name","email","produces","Array","isArray","needs","style","background","color","border","width","height","borderRadius","textAlign","display","justifyContent","alignItems","newEdges","forEach","c1","c2","some","need","includes","push","concat","source","target","animated","stroke","onNodeClick","event","node","children","fitView","nodesDraggable","nodesConnectable","zoomOnScroll","zoomOnPinch","panOnScroll","gap","left","top","padding","boxShadow","zIndex","join"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/NodalGraph.jsx"],"sourcesContent":["import React, { useState, useCallback, useEffect } from \"react\";\r\nimport ReactFlow, { useNodesState, useEdgesState, Controls, Background } from \"reactflow\";\r\nimport \"reactflow/dist/style.css\";\r\n\r\nconst NodalGraph = ({ companies, currentUserEmail }) => {\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n    const [nodes, setNodes, onNodesChange] = useNodesState([]);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState([]);\r\n\r\n    // Build nodes and edges whenever companies array changes\r\n    useEffect(() => {\r\n        if (!companies || companies.length === 0) return;\r\n\r\n        const newNodes = companies.map((c, i) => ({\r\n            id: c.id.toString(),\r\n            position: c.position || { x: i * 200, y: i * 150 },\r\n            data: {\r\n                label: c.name,\r\n                email: c.email,\r\n                produces: Array.isArray(c.produces) ? c.produces : [],\r\n                needs: Array.isArray(c.needs) ? c.needs : [],\r\n            },\r\n            style: {\r\n                background: c.email === currentUserEmail ? \"red\" : \"#fff\",\r\n                color: \"#000\",\r\n                border: \"2px solid #222\",\r\n                width: 150,\r\n                height: 50,\r\n                borderRadius: 50,\r\n                textAlign: \"center\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n            },\r\n        }));\r\n\r\n        const newEdges = [];\r\n        companies.forEach((c1) => {\r\n            companies.forEach((c2) => {\r\n                if (\r\n                    Array.isArray(c1.needs) &&\r\n                    Array.isArray(c2.produces) &&\r\n                    c1.needs.some((need) => c2.produces.includes(need))\r\n                ) {\r\n                    newEdges.push({\r\n                        id: `e${c2.id}-${c1.id}`,\r\n                        source: c2.id.toString(),\r\n                        target: c1.id.toString(),\r\n                        animated: true,\r\n                        style: { stroke: \"#888\" },\r\n                    });\r\n                }\r\n            });\r\n        });\r\n\r\n        setNodes(newNodes);\r\n        setEdges(newEdges);\r\n    }, [companies, currentUserEmail]);\r\n\r\n    const onNodeClick = useCallback((event, node) => {\r\n        setSelectedNode(node);\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ width: \"100%\", height: \"100%\" }}>\r\n            <ReactFlow\r\n                nodes={nodes}\r\n                edges={edges}\r\n                onNodesChange={onNodesChange}\r\n                onEdgesChange={onEdgesChange}\r\n                onNodeClick={onNodeClick}\r\n                fitView\r\n                nodesDraggable\r\n                nodesConnectable={false}\r\n                zoomOnScroll\r\n                zoomOnPinch\r\n                panOnScroll\r\n            >\r\n                <Background color=\"#aaa\" gap={16} />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            {selectedNode && (\r\n                <div\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        left: selectedNode.position.x + 160,\r\n                        top: selectedNode.position.y,\r\n                        background: \"#fff\",\r\n                        padding: \"10px\",\r\n                        borderRadius: \"8px\",\r\n                        border: \"1px solid #222\",\r\n                        boxShadow: \"0px 0px 8px rgba(0,0,0,0.2)\",\r\n                        zIndex: 10,\r\n                    }}\r\n                >\r\n                    <strong>{selectedNode.data.label}</strong>\r\n                    <div>Email: {selectedNode.data.email || \"N/A\"}</div>\r\n                    <div>\r\n                        Produces:{\" \"}\r\n                        {Array.isArray(selectedNode.data.produces)\r\n                            ? selectedNode.data.produces.join(\", \")\r\n                            : \"N/A\"}\r\n                    </div>\r\n                    <div>\r\n                        Needs:{\" \"}\r\n                        {Array.isArray(selectedNode.data.needs)\r\n                            ? selectedNode.data.needs.join(\", \")\r\n                            : \"N/A\"}\r\n                    </div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NodalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}