{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\roger\\\\WebstormProjects\\\\SymbAIosisFinalTwo\\\\frontend\\\\src\\\\components\\\\NodalGraph.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useCallback } from \"react\";\nimport ReactFlow, { MiniMap, Controls, Background, useNodesState, useEdgesState } from \"reactflow\"; // ✅ correct package\nimport 'reactflow/dist/style.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NodalGraph = ({\n  companies,\n  currentUserEmail\n}) => {\n  _s();\n  const generateGraphData = () => {\n    const nodes = companies.map(company => ({\n      id: company.email,\n      data: {\n        label: company.name,\n        company\n      },\n      position: {\n        x: Math.random() * 600,\n        y: Math.random() * 400\n      },\n      style: {\n        background: company.email === currentUserEmail ? \"#ff4d4f\" : \"#00bfff\",\n        color: \"#fff\",\n        border: \"1px solid #222138\",\n        width: 150,\n        padding: 10\n      }\n    }));\n    const edges = [];\n    companies.forEach(a => {\n      companies.forEach(b => {\n        if (a !== b) {\n          const produces = Array.isArray(a.produces) ? a.produces : [];\n          const needs = Array.isArray(b.needs) ? b.needs : [];\n          if (produces.some(item => needs.includes(item))) {\n            edges.push({\n              id: `${a.email}-${b.email}`,\n              source: a.email,\n              target: b.email,\n              animated: true,\n              style: {\n                stroke: \"#888\"\n              }\n            });\n          }\n        }\n      });\n    });\n    return {\n      nodes,\n      edges\n    };\n  };\n  const {\n    nodes: initialNodes,\n    edges: initialEdges\n  } = generateGraphData();\n  const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\n  const [selectedNode, setSelectedNode] = useState(null);\n  const onNodeClick = useCallback((event, node) => setSelectedNode(node), []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"600px\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      onNodeClick: onNodeClick,\n      fitView: true,\n      children: [/*#__PURE__*/_jsxDEV(Background, {\n        variant: \"dots\",\n        gap: 12,\n        size: 1,\n        color: \"#aaa\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this), selectedNode && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        top: selectedNode.position.y + 70,\n        left: selectedNode.position.x + 70,\n        background: \"#fff\",\n        padding: \"10px\",\n        border: \"1px solid #222\",\n        borderRadius: \"5px\",\n        zIndex: 10,\n        maxWidth: \"250px\",\n        wordWrap: \"break-word\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: selectedNode.data.company.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Email:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 25\n        }, this), \" \", Array.isArray(selectedNode.data.company.emails) ? selectedNode.data.company.emails.join(\", \") : \"No emails available\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Produces:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 25\n        }, this), \" \", Array.isArray(selectedNode.data.company.produces) ? selectedNode.data.company.produces.join(\", \") : \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Needs:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 25\n        }, this), \" \", Array.isArray(selectedNode.data.company.needs) ? selectedNode.data.company.needs.join(\", \") : \"None\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 9\n  }, this);\n};\n_s(NodalGraph, \"0zBcLqUUAPlywXIj+uk4UoxXZ/M=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n_c = NodalGraph;\nexport default NodalGraph;\nvar _c;\n$RefreshReg$(_c, \"NodalGraph\");","map":{"version":3,"names":["React","useState","useCallback","ReactFlow","MiniMap","Controls","Background","useNodesState","useEdgesState","jsxDEV","_jsxDEV","NodalGraph","companies","currentUserEmail","_s","generateGraphData","nodes","map","company","id","email","data","label","name","position","x","Math","random","y","style","background","color","border","width","padding","edges","forEach","a","b","produces","Array","isArray","needs","some","item","includes","push","source","target","animated","stroke","initialNodes","initialEdges","setNodes","onNodesChange","setEdges","onEdgesChange","selectedNode","setSelectedNode","onNodeClick","event","node","height","children","fitView","variant","gap","size","fileName","_jsxFileName","lineNumber","columnNumber","top","left","borderRadius","zIndex","maxWidth","wordWrap","emails","join","_c","$RefreshReg$"],"sources":["C:/Users/roger/WebstormProjects/SymbAIosisFinalTwo/frontend/src/components/NodalGraph.jsx"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\r\nimport ReactFlow, {\r\n    MiniMap,\r\n    Controls,\r\n    Background,\r\n    useNodesState,\r\n    useEdgesState,\r\n} from \"reactflow\"; // ✅ correct package\r\nimport 'reactflow/dist/style.css';\r\n\r\nconst NodalGraph = ({ companies, currentUserEmail }) => {\r\n    const generateGraphData = () => {\r\n        const nodes = companies.map((company) => ({\r\n            id: company.email,\r\n            data: { label: company.name, company },\r\n            position: { x: Math.random() * 600, y: Math.random() * 400 },\r\n            style: {\r\n                background: company.email === currentUserEmail ? \"#ff4d4f\" : \"#00bfff\",\r\n                color: \"#fff\",\r\n                border: \"1px solid #222138\",\r\n                width: 150,\r\n                padding: 10,\r\n            },\r\n        }));\r\n\r\n        const edges = [];\r\n        companies.forEach((a) => {\r\n            companies.forEach((b) => {\r\n                if (a !== b) {\r\n                    const produces = Array.isArray(a.produces) ? a.produces : [];\r\n                    const needs = Array.isArray(b.needs) ? b.needs : [];\r\n                    if (produces.some((item) => needs.includes(item))) {\r\n                        edges.push({\r\n                            id: `${a.email}-${b.email}`,\r\n                            source: a.email,\r\n                            target: b.email,\r\n                            animated: true,\r\n                            style: { stroke: \"#888\" },\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        });\r\n\r\n        return { nodes, edges };\r\n    };\r\n\r\n    const { nodes: initialNodes, edges: initialEdges } = generateGraphData();\r\n    const [nodes, setNodes, onNodesChange] = useNodesState(initialNodes);\r\n    const [edges, setEdges, onEdgesChange] = useEdgesState(initialEdges);\r\n    const [selectedNode, setSelectedNode] = useState(null);\r\n\r\n    const onNodeClick = useCallback((event, node) => setSelectedNode(node), []);\r\n\r\n    return (\r\n        <div style={{ height: \"600px\", width: \"100%\" }}>\r\n            <ReactFlow\r\n                nodes={nodes}\r\n                edges={edges}\r\n                onNodesChange={onNodesChange}\r\n                onEdgesChange={onEdgesChange}\r\n                onNodeClick={onNodeClick}\r\n                fitView\r\n            >\r\n                <Background variant=\"dots\" gap={12} size={1} color=\"#aaa\" />\r\n                <MiniMap />\r\n                <Controls />\r\n            </ReactFlow>\r\n\r\n            {selectedNode && (\r\n                <div\r\n                    style={{\r\n                        position: \"absolute\",\r\n                        top: selectedNode.position.y + 70,\r\n                        left: selectedNode.position.x + 70,\r\n                        background: \"#fff\",\r\n                        padding: \"10px\",\r\n                        border: \"1px solid #222\",\r\n                        borderRadius: \"5px\",\r\n                        zIndex: 10,\r\n                        maxWidth: \"250px\",\r\n                        wordWrap: \"break-word\",\r\n                    }}\r\n                >\r\n                    <h4>{selectedNode.data.company.name}</h4>\r\n                    <p>\r\n                        <strong>Email:</strong>{\" \"}\r\n                        {Array.isArray(selectedNode.data.company.emails)\r\n                            ? selectedNode.data.company.emails.join(\", \")\r\n                            : \"No emails available\"}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Produces:</strong>{\" \"}\r\n                        {Array.isArray(selectedNode.data.company.produces)\r\n                            ? selectedNode.data.company.produces.join(\", \")\r\n                            : \"None\"}\r\n                    </p>\r\n                    <p>\r\n                        <strong>Needs:</strong>{\" \"}\r\n                        {Array.isArray(selectedNode.data.company.needs)\r\n                            ? selectedNode.data.company.needs.join(\", \")\r\n                            : \"None\"}\r\n                    </p>\r\n                </div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NodalGraph;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}